# This is where we define pipeline resources, such as git, kubernetes and others
resources:
- name: hello-world-master
  type: git
  source:
    uri: https://github.com/JuubiSnake/hello-world
    branch: master

- name: hello-world-quay-registry
  type: docker-image
  source:
    username: ((quay-username))
    password: ((quay-password))
    repository: quay.io/mweller/hello-world


# Jobs are expressions of what we'd like to achieve in a global scope...
jobs:
# Our job will be concerned with testing a master build
- name: test-master
  plan:
  - get: hello-world-master
    trigger: true
    # tasks are single units of computation that can be composed together to
    # form a job
  - task: test
    config:
      inputs:
      - name: hello-world-master
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: alpine
      run:
        path: /bin/sh
        args: 
          - -exc
          - |
            apk add --no-cache git
            cd hello-world-master
            CGO_ENABLED=0 go test ./...

# this job is concerned with publishing a master build to quay
- name: release-master
  plan:
  - get: hello-world-master
    trigger: true
    passed:
    - test-master
  - task: build-master
    config:
      inputs:
      - name: hello-world-master
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: golang
          tag: alpine
      run:
        path: /bin/sh
        args: 
          - -exc
          - |
            apk add --no-cache git
            cd hello-world-master
            CGO_ENABLED=0 go build cmd/hello-world/main.go

  - put: hello-world-quay-registry
    params:
      build: ./hello-world-master
      tag_file: ./hello-world-master/.git/short_ref
      dockerfile: ./hello-world-master/build/package/docker/Dockerfile

  - task: update-deploy-job
    config:
      inputs:
      - name: hello-world-master
      platform: linux
      image_resource:
        type: docker-image
        source:
          repository: alpine
      run:
        path: /bin/ash
        args: 
          - -exc
          - |
            apk add --no-cache curl tar
            export LATEST_GOOD_VERSION=$(cat ./hello-world-master/.git/short_ref)
            curl -L https://github.com/concourse/concourse/releases/download/v5.3.0/fly-5.3.0-linux-amd64.tgz | tar xz            
            chmod +x ./fly
            ./fly -t local login -c http://nasal-eel-web.default.svc.cluster.local:8080 -n main -u ((concourse-username)) -p ((concourse-password))
            ./fly -t local sync
            sed 's/^- name: deploy-version-.*-/- name: deploy-version-'"$LATEST_GOOD_VERSION"'-/' ./hello-world-master/build/ci/pipeline.yaml > ./updated-pipeline.yml
            ./fly -t local set-pipeline -p hello-world -c ./updated-pipeline.yml -v quay-username=((quay-username)) -v quay-password=((quay-password)) -v concourse-username=((concourse-username)) -v concourse-password=((concourse-password)) -n

# this job is concerned with deploying a version of the hello-world app onto
# kubernetes and is triggered manually
# the name of this job is replaced by the SED command shown in the previous task
- name: deploy-version-PLACEHOLDER-to-stage
  plan:
  - get: hello-world-master
    passed:
      - release-master
    trigger: false
  - task: get-git-info
    file: ./hello-world-master/build/ci/tasks/git-info-task.yaml
  - put: hello-world-quay-registry
    params:
      build: ./hello-world-master
      tag: stage
      labels_file: ./git_info/info.json      
      dockerfile: ./hello-world-master/build/package/docker/Dockerfile

- name: deploy-version-PLACEHOLDER-to-production
  plan:
  - get: hello-world-master
    passed:
      - release-master
    trigger: false
  - task: get-git-info
    file: hello-world-master/build/ci/tasks/git-info-task.yaml
  - put: hello-world-quay-registry
    params:
      build: ./hello-world-master
      tag: production
      labels_file: ./git_info/info.json      
      dockerfile: ./hello-world-master/build/package/docker/Dockerfile



